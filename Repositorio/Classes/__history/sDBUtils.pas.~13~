unit sDBUtils;

interface

uses
  DBClient, DBXCommon, SysUtils, Conexao, SqlExpr, Variants, DB, Provider, Logger;

type
  TDBUtils = class
  public
    class function GetId(AEmpresa: Variant; AId: Integer;
      ANomeTabela: String): Integer;
    class function ExecutarConsulta(ASql: String): OleVariant;
  end;

implementation

{ TDBUtils }

class function TDBUtils.ExecutarConsulta(ASql: String): OleVariant;
var
  VProvider: TProvider;
begin
  try
    VProvider := TProvider.Create(nil);

    try
      VProvider.DataSet := Self.FConsulta;

      Self.FConsulta.Close;
      Self.FConsulta.SQL.Text := ASql;
      Self.FConsulta.Open;

      try
        Result := VProvider.Data;
      finally
        Self.FConsulta.Close;
      end;
    finally
      FreeAndNil(VProvider);
    end;
  except
    on E: Exception do
      begin
        Logger.NomeMetodo := 'ExecutarConsulta';
        Logger.Add(ClassName, E.Message);
        raise;
      end;
  end;
end;

class function TDBUtils.GetId(AEmpresa: Variant; AId: Integer;
  ANomeTabela: String): Integer;
const
  ROTINA: String = 'GetId';
var
  VTransacao: TDBXTransaction;
  VQry: TSQLQuery;
begin
  try
    ConexaoDBX.InicializaTransacaoBD();

    VQry := ConexaoDBX.BuildQry();

    VQry.SQL.Text :=
      ('select pk_id from sp_primary_key(:pk_emp, :pk_nm_tabela, :nr_id)');

    VQry.Params[0].DataType := DB.ftInteger;
    VQry.Params[1].DataType := DB.ftString;
    VQry.Params[2].DataType := DB.ftInteger;

    VQry.ParamByName('pk_emp').Value := AEmpresa;
    VQry.ParamByName('pk_nm_tabela').AsString := ANomeTabela;

    if AId > 0 then
      VQry.ParamByName('nr_id').AsInteger := AId
    else
      VQry.ParamByName('nr_id').Value := Null;

    VQry.Open;

    try
      Result := VQry.FieldByName('pk_id').AsInteger;
    finally
      VQry.Close;
      FreeAndNil(VQry);
    end;

    ConexaoDBX.CommitTransacaoBD();
  except
    on E: Exception do
    begin
      ConexaoDBX.RollbackTransacaoBD();

      if Pos('PRIMARY OR UNIQUE KEY', AnsiUpperCase(E.Message)) > 0 then
        raise Exception.Create('Violação de chave primária. Este id já existe.')
      else
        raise Exception.Create(ClassName + ': ' + ROTINA + sLineBreak +
          E.Message);
    end;
  end;
end;

end.
