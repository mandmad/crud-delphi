unit Pesquisar;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls,
  DBClient, Provider, SqlExpr, Generics.Collections, Grids, DBGrids, DB,
  PersistenciaDBX, Empresa_Corrente;

type
  TfrmPesquisar = class(TForm)
    pnlPesquisa: TPanel;
    lblCampos: TLabel;
    Label2: TLabel;
    cbxField: TComboBox;
    edtValor: TEdit;
    btnPesquisar: TBitBtn;
    pnlRodape: TPanel;
    OK: TBitBtn;
    DtsLocalizar: TDataSource;
    dbgPesquisar: TDBGrid;
    btnGravarIndice: TBitBtn;
    procedure FormCreate(Sender: TObject);
    procedure OKClick(Sender: TObject);
    procedure gdDadosPesquisaDBTableView1DblClick(Sender: TObject);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnPesquisarClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure dbgPesquisarDblClick(Sender: TObject);
    procedure btnGravarIndiceClick(Sender: TObject);
    procedure edtValorChange(Sender: TObject);
    procedure edtValorExit(Sender: TObject);
  private
    FIdCliente: Integer;
    FId: Integer;
    FMapCampo: TDictionary<Integer, String>;
    FNomePesquisa: String;

    procedure CarregarSqlDefault;
  protected
    FSql: String;
    FSqlDefault: String;
    FCamposNomeExibicao: TStringList;
    FPersistencia: TPersistenciaDBX;
    FFiltroSql: String;

  public
    procedure Localizar(APEmpresa: Boolean); virtual;
    procedure Confirmar; virtual;
    procedure SetCamposNomeExibicao;
    procedure CarregarComboBoxPesquisa;

    property Id        : Integer read FId         write FId;
    property SqlDefault: String  read FSqlDefault write FSqlDefault;

    property CamposNomeExibicao: TStringList read FCamposNomeExibicao write FCamposNomeExibicao;
    property IdCliente         : Integer     read FIdCliente          write FIdCliente;
    property FiltroSql         : String      read FFiltroSql          write FFiltroSql;
    property NomePesquisa      : String      read FNomePesquisa       write FNomePesquisa;
  end;

var
  frmPesquisar: TfrmPesquisar;

implementation



uses BuilderLogDialogo, sEnumerados, Logger, sFuncoes, dtm_Pesquisar;{$R *.dfm}

{ TfrmPes_ }

procedure TfrmPesquisar.Confirmar;
begin
  Self.FId := DtsLocalizar.DataSet.Fields[0].AsInteger;

  Close();
end;

procedure TfrmPesquisar.dbgPesquisarDblClick(Sender: TObject);
begin
  Self.Confirmar();
end;

procedure TfrmPesquisar.edtValorChange(Sender: TObject);
begin
  Self.Localizar(False);
end;

procedure TfrmPesquisar.edtValorExit(Sender: TObject);
begin
  if (EmpresaCorrente.Parametro.PesquisaRapida = 1)
    and (not DtsLocalizar.DataSet.IsEmpty) then
    Self.dbgPesquisar.SetFocus
end;

procedure TfrmPesquisar.btnGravarIndiceClick(Sender: TObject);
begin
  TFuncoes.GravarArquivoIniIndice(Self.FNomePesquisa, IntToStr(Self.cbxField.ItemIndex));
end;

procedure TfrmPesquisar.btnPesquisarClick(Sender: TObject);
begin
  Self.Localizar(False);

  dbgPesquisar.SetFocus();
end;

procedure TfrmPesquisar.CarregarComboBoxPesquisa;
var
  I: Integer;
begin
  try
    for I := 0 to Pred(DtsLocalizar.DataSet.FieldCount) do
    begin
      cbxField.Items.Add(DtsLocalizar.DataSet.Fields[I].DisplayLabel);
      FMapCampo.Add(I, DtsLocalizar.DataSet.Fields[I].FieldName);
    end;

    cbxField.ItemIndex := TFuncoes.LerArquivoIniIndice(Self.FNomePesquisa);
  except
    on E: Exception do
    begin
      TBuilderLogDialogo.Show(sEnumerados.ilogErro, LogErro.GetLog(), E.Message);
    end;
  end;
end;

procedure TfrmPesquisar.CarregarSqlDefault;
var
  VProvider: TDataSetProvider;
begin
  VProvider :=
    TDataSetProvider(TClientDataSet(DtsLocalizar.DataSet).Owner.FindComponent(TClientDataSet(DtsLocalizar.DataSet).ProviderName));

  Self.FSqlDefault := TSQLDataSet(VProvider.DataSet).CommandText;
end;

procedure TfrmPesquisar.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  DtsLocalizar.DataSet.Close();

  FreeAndNil(FPersistencia);
  FreeAndNil(FMapCampo);
  FreeAndNil(FCamposNomeExibicao);
end;

procedure TfrmPesquisar.FormCreate(Sender: TObject);
begin
  Self.FCamposNomeExibicao := TStringList.Create;
  FMapCampo := TDictionary<Integer, String>.Create;
  FPersistencia := TPersistenciaDBX.Create;
end;

procedure TfrmPesquisar.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key = VK_ESCAPE then
  begin
    Close();
  end;
end;

procedure TfrmPesquisar.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #13 then
  begin
    Key := #0;
    Perform(Wm_NextDlgCtl, 0, 0);
  end;
end;

procedure TfrmPesquisar.FormShow(Sender: TObject);
begin
  dm_Pesquisar.cds_Pesquisar.Data := FPersistencia.ExecutarConsulta(FSqlDefault);
  Self.SetCamposNomeExibicao();
  Self.CarregarComboBoxPesquisa();
end;

procedure TfrmPesquisar.gdDadosPesquisaDBTableView1DblClick(Sender: TObject);
begin
  Self.Confirmar();
end;

procedure TfrmPesquisar.Localizar(APEmpresa: Boolean);
var
  VMontarSql: String;
  VCampo: String;
  I: Integer;
begin
  VMontarSql := EmptyStr;

  VCampo := FMapCampo.Items[cbxField.ItemIndex];

  try
    if APEmpresa then
      begin
        VMontarSql := ' where upper(' + VCampo + ')' + ' like ' + ' upper( ' +
        QuotedStr(edtValor.Text + '%') + ') and (nota.nt_id_empresa = ' + IntToStr(EmpresaCorrente.Id) + Self.FFiltroSql + ') order by '
        + VCampo;
      end
      else
      begin
        VMontarSql := ' where upper(' + VCampo + ')' + ' like ' + ' upper( ' +
        QuotedStr(edtValor.Text + '%') + ') ' + Self.FFiltroSql + ' order by ' + VCampo;
      end;

    if Self.IdCliente > 0 then
    begin
      if Trim(edtValor.Text) <> EmptyStr then
      begin
        VMontarSql :=  ' where pessoa_endereco.pe_id_pessoa = ' + IntToStr(Self.IdCliente) + ' and upper(' + VCampo + ')' +
          ' like ' + ' upper( ' + QuotedStr(edtValor.Text + '%') + ') ' + Self.FFiltroSql + ' order by ' + VCampo;
      end
      else
      begin
        VMontarSql :=  ' where pessoa_endereco.pe_id_pessoa = ' + IntToStr(Self.IdCliente) + Self.FFiltroSql + ' order by pe_endereco';
      end;
    end;

    dm_Pesquisar.cds_Pesquisar.Data :=
      FPersistencia.ExecutarConsulta(TFuncoes.MontarSqlComponente(Self.FSqlDefault) + VMontarSql);

    for I := 0 to Pred(Self.FCamposNomeExibicao.Count) do
    begin
      DtsLocalizar.DataSet.Fields[I].DisplayLabel := Self.FCamposNomeExibicao[I];
    end;
  except
    on E: Exception do
    begin
      TBuilderLogDialogo.Show(sEnumerados.ilogErro, LogErro.GetLog(), E.Message);
    end;
  end;
end;

procedure TfrmPesquisar.OKClick(Sender: TObject);
begin
  Self.Confirmar();
end;

procedure TfrmPesquisar.SetCamposNomeExibicao;
var
  I: Integer;
begin
  for I := 0 to Pred(Self.FCamposNomeExibicao.Count) do
  begin
    DtsLocalizar.DataSet.Fields[I].DisplayLabel := Self.FCamposNomeExibicao[I];
  end;
end;

end.
